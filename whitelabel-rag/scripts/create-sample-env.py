#!/usr/bin/env python3
"""
Create a sample .env file with user input
"""

import os
import sys
from pathlib import Path

def get_user_input():
    """Get configuration from user input."""
    print("üîß WhiteLabelRAG Environment Setup")
    print("=" * 40)
    print()
    
    config = {}
    
    # GEMINI_API_KEY
    print("üìù GEMINI_API_KEY (Required)")
    print("Get your API key from: https://makersuite.google.com/app/apikey")
    api_key = input("Enter your Gemini API key: ").strip()
    
    if not api_key:
        print("‚ùå API key is required!")
        return None
    
    config['GEMINI_API_KEY'] = api_key
    
    # Optional configurations
    print("\nüìù Optional Configuration (press Enter for defaults)")
    
    # Flask environment
    flask_env = input("Flask environment [development]: ").strip() or "development"
    config['FLASK_ENV'] = flask_env
    
    # Secret key
    secret_key = input("Secret key [auto-generated]: ").strip()
    if not secret_key:
        import secrets
        secret_key = secrets.token_urlsafe(32)
    config['SECRET_KEY'] = secret_key
    
    # Upload folder
    upload_folder = input("Upload folder [uploads]: ").strip() or "uploads"
    config['UPLOAD_FOLDER'] = upload_folder
    
    # ChromaDB path
    chroma_path = input("ChromaDB path [./chromadb_data]: ").strip() or "./chromadb_data"
    config['CHROMA_DB_PATH'] = chroma_path
    
    # Chunk size
    chunk_size = input("Document chunk size [500]: ").strip() or "500"
    try:
        int(chunk_size)
        config['CHUNK_SIZE'] = chunk_size
    except ValueError:
        config['CHUNK_SIZE'] = "500"
    
    # Chunk overlap
    chunk_overlap = input("Document chunk overlap [50]: ").strip() or "50"
    try:
        int(chunk_overlap)
        config['CHUNK_OVERLAP'] = chunk_overlap
    except ValueError:
        config['CHUNK_OVERLAP'] = "50"
    
    # Top K results
    top_k = input("Top K search results [3]: ").strip() or "3"
    try:
        int(top_k)
        config['TOP_K_RESULTS'] = top_k
    except ValueError:
        config['TOP_K_RESULTS'] = "3"
    
    return config

def create_env_file(config):
    """Create .env file with configuration."""
    env_content = f"""# WhiteLabelRAG Configuration
# Generated by create-sample-env.py

# Google Gemini API Configuration
GEMINI_API_KEY={config['GEMINI_API_KEY']}

# Flask Configuration
FLASK_ENV={config['FLASK_ENV']}
SECRET_KEY={config['SECRET_KEY']}
FLASK_DEBUG=True

# ChromaDB Configuration
CHROMA_DB_IMPL=duckdb+parquet
CHROMA_DB_PATH={config['CHROMA_DB_PATH']}
CHROMA_HOST=localhost
CHROMA_PORT=8000

# Application Configuration
MAX_CONTENT_LENGTH=16777216  # 16MB
UPLOAD_FOLDER={config['UPLOAD_FOLDER']}
CHUNK_SIZE={config['CHUNK_SIZE']}
CHUNK_OVERLAP={config['CHUNK_OVERLAP']}
TOP_K_RESULTS={config['TOP_K_RESULTS']}

# Redis Configuration (optional, for session storage)
REDIS_URL=redis://localhost:6379/0

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=app.log
"""
    
    # Check if .env already exists
    if Path('.env').exists():
        response = input("\n‚ö†Ô∏è .env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Cancelled. Existing .env file preserved.")
            return False
    
    # Write the file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("\n‚úÖ .env file created successfully!")
        return True
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        return False

def create_directories(config):
    """Create necessary directories."""
    print("\nüìÅ Creating directories...")
    
    directories = [
        config['UPLOAD_FOLDER'],
        config['CHROMA_DB_PATH'].replace('./', ''),
        'logs'
    ]
    
    for dir_name in directories:
        try:
            Path(dir_name).mkdir(exist_ok=True)
            print(f"‚úÖ {dir_name}/")
        except Exception as e:
            print(f"‚ùå Failed to create {dir_name}/: {e}")

def main():
    """Main setup function."""
    print("üöÄ WhiteLabelRAG Environment Configuration")
    print()
    
    # Get configuration from user
    config = get_user_input()
    if not config:
        sys.exit(1)
    
    # Create .env file
    if not create_env_file(config):
        sys.exit(1)
    
    # Create directories
    create_directories(config)
    
    print("\nüéâ Setup complete!")
    print("\nNext steps:")
    print("1. Install dependencies: pip install -r requirements.txt")
    print("2. Test setup: python scripts/test-setup.py")
    print("3. Start application: python run.py")
    print("4. Open http://localhost:5000 in your browser")

if __name__ == '__main__':
    main()